// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Rng$Gridironglory = require("./Rng.bs.js");

var sb_001 = /* teams : array */[
  "Virginia Beach",
  "Houston"
];

var sb_002 = /* score : array */[
  0,
  0
];

var sb = /* record */[
  /* gameover */false,
  sb_001,
  sb_002,
  /* poss */0,
  /* half */0,
  /* playcount */0,
  /* los */20,
  /* down */1,
  /* ytg */10
];

function generatePlayMatrix(diceroll) {
  var switcher = diceroll - 2 | 0;
  if (switcher > 10 || switcher < 0) {
    return Pervasives.failwith("Diceroll out of range!");
  } else {
    switch (switcher) {
      case 0 : 
          return /* tuple */[
                  /* "C" */67,
                  100
                ];
      case 1 : 
          return /* tuple */[
                  /* "I" */73,
                  10
                ];
      case 2 : 
          return /* tuple */[
                  /* "R" */82,
                  20
                ];
      case 3 : 
          return /* tuple */[
                  /* "S" */83,
                  -10
                ];
      case 4 : 
          return /* tuple */[
                  /* "R" */82,
                  5
                ];
      case 5 : 
          return /* tuple */[
                  /* "X" */88,
                  0
                ];
      case 6 : 
          return /* tuple */[
                  /* "C" */67,
                  5
                ];
      case 7 : 
          return /* tuple */[
                  /* "C" */67,
                  25
                ];
      case 8 : 
          return /* tuple */[
                  /* "R" */82,
                  0
                ];
      case 9 : 
          return /* tuple */[
                  /* "F" */70,
                  0
                ];
      case 10 : 
          return /* tuple */[
                  /* "C" */67,
                  30
                ];
      
    }
  }
}

function tallySafety(sb) {
  var newScore = sb[/* score */2];
  var scoringSide = 1 - sb[/* poss */3] | 0;
  Caml_array.caml_array_set(newScore, scoringSide, Caml_array.caml_array_get(newScore, scoringSide) + 2 | 0);
  return /* record */[
          /* gameover */sb[/* gameover */0],
          /* teams */sb[/* teams */1],
          /* score */newScore,
          /* poss */scoringSide,
          /* half */sb[/* half */4],
          /* playcount */sb[/* playcount */5],
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function downCheck(yg, newLos, sb) {
  if (yg >= sb[/* ytg */8]) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */sb[/* poss */3],
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */newLos,
            /* down */1,
            /* ytg */10
          ];
  } else if (sb[/* down */7] === 4) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */1 - sb[/* poss */3] | 0,
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */100 - newLos | 0,
            /* down */1,
            /* ytg */10
          ];
  } else {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */sb[/* poss */3],
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */newLos,
            /* down */sb[/* down */7] + 1 | 0,
            /* ytg */sb[/* ytg */8] - yg | 0
          ];
  }
}

function touchback(sb) {
  return /* record */[
          /* gameover */sb[/* gameover */0],
          /* teams */sb[/* teams */1],
          /* score */sb[/* score */2],
          /* poss */1 - sb[/* poss */3] | 0,
          /* half */sb[/* half */4],
          /* playcount */sb[/* playcount */5],
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function tallyTouchdown(sb) {
  var newScore = sb[/* score */2];
  Caml_array.caml_array_set(newScore, sb[/* poss */3], Caml_array.caml_array_get(newScore, sb[/* poss */3]) + 6 | 0);
  if (Rng$Gridironglory.rollDice(/* () */0) >= 5) {
    Caml_array.caml_array_set(newScore, sb[/* poss */3], Caml_array.caml_array_get(newScore, sb[/* poss */3]) + 1 | 0);
  }
  return /* record */[
          /* gameover */sb[/* gameover */0],
          /* teams */sb[/* teams */1],
          /* score */newScore,
          /* poss */1 - sb[/* poss */3] | 0,
          /* half */sb[/* half */4],
          /* playcount */sb[/* playcount */5],
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function turnoverBall(yg, sb) {
  var newLos = sb[/* los */6] + yg | 0;
  if (newLos >= 100) {
    return touchback(sb);
  } else {
    var newLos$1 = 100 - newLos | 0;
    var newPoss = 1 - sb[/* poss */3] | 0;
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */newPoss,
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */newLos$1,
            /* down */sb[/* down */7],
            /* ytg */sb[/* ytg */8]
          ];
  }
}

function resolvePlayMatrix(pm, sb) {
  var yg = pm[1];
  var switcher = pm[0] - 67 | 0;
  if (switcher > 21 || switcher < 0) {
    return Pervasives.failwith("Invalid play matrix!");
  } else {
    switch (switcher) {
      case 3 : 
      case 6 : 
          return turnoverBall(yg, sb);
      case 1 : 
      case 2 : 
      case 4 : 
      case 5 : 
      case 7 : 
      case 8 : 
      case 9 : 
      case 10 : 
      case 11 : 
      case 12 : 
      case 13 : 
      case 14 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
          return Pervasives.failwith("Invalid play matrix!");
      case 0 : 
      case 15 : 
      case 16 : 
      case 21 : 
          var yg$1 = yg;
          var sb$1 = sb;
          var newLos = sb$1[/* los */6] + yg$1 | 0;
          if (newLos <= 0) {
            return tallySafety(sb$1);
          } else if (newLos < 100) {
            return downCheck(yg$1, newLos, sb$1);
          } else if (newLos >= 100) {
            return tallyTouchdown(sb$1);
          } else {
            return Pervasives.failwith("WTF?");
          }
      
    }
  }
}

function advanceBall(yg, sb) {
  var newLos = sb[/* los */6] + yg | 0;
  if (newLos <= 0) {
    return tallySafety(sb);
  } else if (newLos < 100) {
    return downCheck(yg, newLos, sb);
  } else if (newLos >= 100) {
    return tallyTouchdown(sb);
  } else {
    return Pervasives.failwith("Where are we?");
  }
}

function tickPlayClock(sb) {
  var newPlaycount = sb[/* playcount */5] + 1 | 0;
  var match = sb[/* half */4];
  var exit = 0;
  if (match !== 0) {
    if (match !== 1 || newPlaycount < 24) {
      exit = 1;
    } else {
      return /* record */[
              /* gameover */true,
              /* teams */sb[/* teams */1],
              /* score */sb[/* score */2],
              /* poss */sb[/* poss */3],
              /* half */sb[/* half */4],
              /* playcount */newPlaycount,
              /* los */sb[/* los */6],
              /* down */sb[/* down */7],
              /* ytg */sb[/* ytg */8]
            ];
    }
  } else if (newPlaycount >= 24) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */1,
            /* half */1,
            /* playcount */0,
            /* los */20,
            /* down */1,
            /* ytg */10
          ];
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */sb[/* poss */3],
            /* half */sb[/* half */4],
            /* playcount */newPlaycount,
            /* los */sb[/* los */6],
            /* down */sb[/* down */7],
            /* ytg */sb[/* ytg */8]
          ];
  }
  
}

function whistle(_sb) {
  while(true) {
    var sb = _sb;
    var pm = generatePlayMatrix(Rng$Gridironglory.rollDice(/* () */0));
    console.log("!!", Char.escaped(pm[0]), pm[1], "!!");
    var newboard = resolvePlayMatrix(pm, sb);
    var newboard$1 = tickPlayClock(newboard);
    console.log("@@", newboard$1[/* playcount */5], "@@", newboard$1);
    var match = newboard$1[/* gameover */0];
    if (match) {
      return newboard$1;
    } else {
      _sb = newboard$1;
      continue ;
    }
  };
}

var finalboard = whistle(sb);

var playsPerHalf = 24;

exports.playsPerHalf = playsPerHalf;
exports.sb = sb;
exports.generatePlayMatrix = generatePlayMatrix;
exports.tallySafety = tallySafety;
exports.downCheck = downCheck;
exports.touchback = touchback;
exports.tallyTouchdown = tallyTouchdown;
exports.turnoverBall = turnoverBall;
exports.resolvePlayMatrix = resolvePlayMatrix;
exports.advanceBall = advanceBall;
exports.tickPlayClock = tickPlayClock;
exports.whistle = whistle;
exports.finalboard = finalboard;
/* finalboard Not a pure module */
