// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Rng$Gridironglory = require("./Rng.bs.js");

var citypool = /* array */[
  "New York",
  "Los Angeles",
  "Chicago",
  "Dallas",
  "Houston",
  "Washington",
  "Miami",
  "Philadelphia",
  "Atlanta",
  "Boston",
  "Phoenix",
  "San Francisco",
  "Riverside",
  "Detroit",
  "Seattle",
  "Minneapolis",
  "San Diego",
  "Tampa",
  "Denver",
  "Baltimore",
  "St. Louis",
  "Charlotte",
  "Orlando",
  "San Antonio",
  "Portland",
  "Pittsburgh",
  "Sacramento",
  "Las Vegas",
  "Cincinnati",
  "Kansas City",
  "Austin",
  "Columbus"
];

function draw2Cities(param) {
  var shuffled = Belt_Array.shuffle(citypool);
  return /* tuple */[
          Caml_array.caml_array_get(shuffled, 0),
          Caml_array.caml_array_get(shuffled, 1)
        ];
}

function initScoreboard(vteam, hteam) {
  return /* record */[
          /* gameover */false,
          /* teams : array */[
            vteam,
            hteam
          ],
          /* score : array */[
            0,
            0
          ],
          /* poss */0,
          /* half */0,
          /* playcount */0,
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function generatePlayMatrix(diceroll) {
  switch (diceroll) {
    case 2 : 
        return /* tuple */[
                /* "C" */67,
                100
              ];
    case 3 : 
        return /* tuple */[
                /* "I" */73,
                10
              ];
    case 4 : 
        return /* tuple */[
                /* "R" */82,
                20
              ];
    case 5 : 
        return /* tuple */[
                /* "S" */83,
                -10
              ];
    case 6 : 
        return /* tuple */[
                /* "R" */82,
                5
              ];
    case 7 : 
        return /* tuple */[
                /* "X" */88,
                0
              ];
    case 8 : 
        return /* tuple */[
                /* "C" */67,
                5
              ];
    case 9 : 
        return /* tuple */[
                /* "C" */67,
                25
              ];
    case 10 : 
        return /* tuple */[
                /* "R" */82,
                0
              ];
    case 11 : 
        return /* tuple */[
                /* "F" */70,
                0
              ];
    case 12 : 
        return /* tuple */[
                /* "C" */67,
                30
              ];
    default:
      return Pervasives.failwith("Diceroll out of range!");
  }
}

function tallySafety(sb) {
  var newScore = sb[/* score */2];
  var scoringSide = 1 - sb[/* poss */3] | 0;
  Caml_array.caml_array_set(newScore, scoringSide, Caml_array.caml_array_get(newScore, scoringSide) + 2 | 0);
  return /* record */[
          /* gameover */sb[/* gameover */0],
          /* teams */sb[/* teams */1],
          /* score */newScore,
          /* poss */scoringSide,
          /* half */sb[/* half */4],
          /* playcount */sb[/* playcount */5],
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function downCheck(yg, newLos, sb) {
  if (yg >= sb[/* ytg */8]) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */sb[/* poss */3],
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */newLos,
            /* down */1,
            /* ytg */10
          ];
  } else if (sb[/* down */7] === 4) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */1 - sb[/* poss */3] | 0,
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */100 - newLos | 0,
            /* down */1,
            /* ytg */10
          ];
  } else {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */sb[/* poss */3],
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */newLos,
            /* down */sb[/* down */7] + 1 | 0,
            /* ytg */sb[/* ytg */8] - yg | 0
          ];
  }
}

function touchback(sb) {
  return /* record */[
          /* gameover */sb[/* gameover */0],
          /* teams */sb[/* teams */1],
          /* score */sb[/* score */2],
          /* poss */1 - sb[/* poss */3] | 0,
          /* half */sb[/* half */4],
          /* playcount */sb[/* playcount */5],
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function tallyTouchdown(sb) {
  var newScore = sb[/* score */2];
  Caml_array.caml_array_set(newScore, sb[/* poss */3], Caml_array.caml_array_get(newScore, sb[/* poss */3]) + 6 | 0);
  if (Rng$Gridironglory.rollDice(/* () */0) >= 5) {
    Caml_array.caml_array_set(newScore, sb[/* poss */3], Caml_array.caml_array_get(newScore, sb[/* poss */3]) + 1 | 0);
  }
  return /* record */[
          /* gameover */sb[/* gameover */0],
          /* teams */sb[/* teams */1],
          /* score */newScore,
          /* poss */1 - sb[/* poss */3] | 0,
          /* half */sb[/* half */4],
          /* playcount */sb[/* playcount */5],
          /* los */20,
          /* down */1,
          /* ytg */10
        ];
}

function turnoverBall(yg, sb) {
  var newLos = sb[/* los */6] + yg | 0;
  if (newLos >= 100) {
    return touchback(sb);
  } else {
    var newLos$1 = 100 - newLos | 0;
    var newPoss = 1 - sb[/* poss */3] | 0;
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */newPoss,
            /* half */sb[/* half */4],
            /* playcount */sb[/* playcount */5],
            /* los */newLos$1,
            /* down */sb[/* down */7],
            /* ytg */sb[/* ytg */8]
          ];
  }
}

function resolvePlayMatrix(pm, sb) {
  var yg = pm[1];
  switch (pm[0]) {
    case 70 : 
    case 73 : 
        return turnoverBall(yg, sb);
    case 68 : 
    case 69 : 
    case 71 : 
    case 72 : 
    case 74 : 
    case 75 : 
    case 76 : 
    case 77 : 
    case 78 : 
    case 79 : 
    case 80 : 
    case 81 : 
    case 84 : 
    case 85 : 
    case 86 : 
    case 87 : 
        return Pervasives.failwith("Invalid play matrix!");
    case 67 : 
    case 82 : 
    case 83 : 
    case 88 : 
        var yg$1 = yg;
        var sb$1 = sb;
        var newLos = sb$1[/* los */6] + yg$1 | 0;
        if (newLos <= 0) {
          return tallySafety(sb$1);
        } else if (newLos < 100) {
          return downCheck(yg$1, newLos, sb$1);
        } else if (newLos >= 100) {
          return tallyTouchdown(sb$1);
        } else {
          return Pervasives.failwith("WTF?");
        }
    default:
      return Pervasives.failwith("Invalid play matrix!");
  }
}

function advanceBall(yg, sb) {
  var newLos = sb[/* los */6] + yg | 0;
  if (newLos <= 0) {
    return tallySafety(sb);
  } else if (newLos < 100) {
    return downCheck(yg, newLos, sb);
  } else if (newLos >= 100) {
    return tallyTouchdown(sb);
  } else {
    return Pervasives.failwith("Where are we?");
  }
}

function tickPlayClock(sb) {
  var newPlaycount = sb[/* playcount */5] + 1 | 0;
  var match = sb[/* half */4];
  var exit = 0;
  if (match !== 0) {
    if (match !== 1 || newPlaycount < 24) {
      exit = 1;
    } else {
      return /* record */[
              /* gameover */true,
              /* teams */sb[/* teams */1],
              /* score */sb[/* score */2],
              /* poss */sb[/* poss */3],
              /* half */sb[/* half */4],
              /* playcount */newPlaycount,
              /* los */sb[/* los */6],
              /* down */sb[/* down */7],
              /* ytg */sb[/* ytg */8]
            ];
    }
  } else if (newPlaycount >= 24) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */1,
            /* half */1,
            /* playcount */0,
            /* los */20,
            /* down */1,
            /* ytg */10
          ];
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return /* record */[
            /* gameover */sb[/* gameover */0],
            /* teams */sb[/* teams */1],
            /* score */sb[/* score */2],
            /* poss */sb[/* poss */3],
            /* half */sb[/* half */4],
            /* playcount */newPlaycount,
            /* los */sb[/* los */6],
            /* down */sb[/* down */7],
            /* ytg */sb[/* ytg */8]
          ];
  }
  
}

function kickoff(vteam, hteam) {
  var sb = initScoreboard(vteam, hteam);
  var _sb = sb;
  while(true) {
    var sb$1 = _sb;
    var pm = generatePlayMatrix(Rng$Gridironglory.rollDice(/* () */0));
    console.log("!!", Char.escaped(pm[0]), pm[1], "!!");
    var newboard = resolvePlayMatrix(pm, sb$1);
    var newboard$1 = tickPlayClock(newboard);
    console.log("@@", newboard$1[/* playcount */5], "@@", newboard$1);
    var match = newboard$1[/* gameover */0];
    if (match) {
      return newboard$1;
    } else {
      _sb = newboard$1;
      continue ;
    }
  };
}

var match = draw2Cities(/* () */0);

var hteam = match[1];

var vteam = match[0];

var resultboard = kickoff(vteam, hteam);

var playsPerHalf = 24;

exports.citypool = citypool;
exports.draw2Cities = draw2Cities;
exports.playsPerHalf = playsPerHalf;
exports.initScoreboard = initScoreboard;
exports.generatePlayMatrix = generatePlayMatrix;
exports.tallySafety = tallySafety;
exports.downCheck = downCheck;
exports.touchback = touchback;
exports.tallyTouchdown = tallyTouchdown;
exports.turnoverBall = turnoverBall;
exports.resolvePlayMatrix = resolvePlayMatrix;
exports.advanceBall = advanceBall;
exports.tickPlayClock = tickPlayClock;
exports.kickoff = kickoff;
exports.vteam = vteam;
exports.hteam = hteam;
exports.resultboard = resultboard;
/* match Not a pure module */
